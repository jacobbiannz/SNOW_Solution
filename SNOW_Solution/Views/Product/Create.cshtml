@model Snow.Web.ViewModel.ProductVM
@using SNOW_Solution.Web.Helper
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProductVM</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MarketPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MarketPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MarketPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StockPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StockPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StockPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CategoryId, // Store selected value in Model.State

                      // Notice "ME" as the last parameter here -
                      // that's the key for "Maine" in the supplied dictionary
                      new SelectList(Model.MySubscriberVM.CategoriesVM, "Id", "Name", "ME"),

                      // Text for the first, non-selected option
                      "- Please select category -",

                      // A class name to put on the "<select>"
                      new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.Label("Brand", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.BrandId, // Store selected value in Model.State

                      // Notice "ME" as the last parameter here -
                      // that's the key for "Maine" in the supplied dictionary
                      new SelectList(Model.MySubscriberVM.BrandsVM, "Id", "Name", "ME"),

                      // Text for the first, non-selected option
                      "- Please select brand -",

                      // A class name to put on the "<select>"
                      new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.Label("Store", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.StoreId, // Store selected value in Model.State

                      // Notice "ME" as the last parameter here -
                      // that's the key for "Maine" in the supplied dictionary
                      new SelectList(Model.MySubscriberVM.StoresVM, "StoreId", "Name", "ME"),

                      // Text for the first, non-selected option
                      "- Please select store -",

                      // A class name to put on the "<select>"
                      new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StoreId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Company", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CompanyId, // Store selected value in Model.State

                      // Notice "ME" as the last parameter here -
                      // that's the key for "Maine" in the supplied dictionary
                      new SelectList(Model.MySubscriberVM.CompaniesVM, "Id", "Name", "ME"),

                      // Text for the first, non-selected option
                      "- Please select company -",

                      // A class name to put on the "<select>"
                      new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="editor-label">
            Upload Image
        </div>
        <div class="editor-field">
            @Html.FileFor(model => model.File)
            @Html.ValidationMessageFor(model => model.File)
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}